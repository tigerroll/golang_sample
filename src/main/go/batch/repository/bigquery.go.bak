package repository

import (
  "context"
  "fmt"
  "log"
  "time"

  "cloud.google.com/go/bigquery"
  "google.golang.org/api/iterator"

  "sample/src/main/go/batch/config"
  "sample/src/main/go/batch/domain"
  "sample/src/main/go/batch/util/logger"
)

type BigQueryRepository struct {
  client    *bigquery.Client
  datasetID string
  tableID   string
}

// NewBigQueryRepository は新しい BigQueryRepository のインスタンスを生成します。
func NewBigQueryRepository(client *bigquery.Client, cfg config.BigQueryConfig) *BigQueryRepository {
  return &BigQueryRepository{
    client:    client,
    datasetID: cfg.DatasetID,
    tableID:   cfg.TableID,
  }
}

// NewBigQueryRepositoryFromConfig は設定から新しい BigQueryRepository のインスタンスを生成します。
func NewBigQueryRepositoryFromConfig(ctx context.Context, cfg config.DatabaseConfig) (*BigQueryRepository, error) {
  client, err := bigquery.NewClient(ctx, cfg.ProjectID)
  if err != nil {
    return nil, fmt.Errorf("failed to create BigQuery client: %w", err)
  }
  bqConfig := config.BigQueryConfig{
    ProjectID: cfg.ProjectID,
    DatasetID: cfg.DatasetID,
    TableID:   cfg.TableID,
  }
  return NewBigQueryRepository(client, bqConfig), nil
}

func (r *BigQueryRepository) SaveWeatherData(ctx context.Context, forecast domain.OpenMeteoForecast) error {
  inserter := r.client.Dataset(r.datasetID).Table(r.tableID).Inserter()
  collectedAt := time.Now().In(time.FixedZone("Asia/Tokyo", 9*60*60))

  var rows []*bigquery.Row{}
  for i := range forecast.Hourly.Time {
    rows = append(rows, &bigquery.Row{
      {Value: forecast.Hourly.Time[i]},
      {Value: forecast.Hourly.WeatherCode[i]},
      {Value: forecast.Hourly.Temperature2M[i]},
      {Value: forecast.Latitude},
      {Value: forecast.Longitude},
      {Value: collectedAt},
    })
  }

  if err := inserter.Put(ctx, rows); err != nil {
    return fmt.Errorf("failed to insert data into BigQuery: %w", err)
  }

  logger.Debugf("Open Meteo の天気予報データを BigQuery に保存しました: 緯度=%f, 経度=%f, データ数=%d",
    forecast.Latitude, forecast.Longitude, len(forecast.Hourly.Time))
  return nil
}

func (r *BigQueryRepository) Close() error {
  if r.client != nil {
    if err := r.client.Close(); err != nil {
      return fmt.Errorf("failed to close BigQuery client: %w", err)
    }
    log.Println("[INFO] BigQuery の接続を閉じました。")
  }
  return nil
}

var _ WeatherRepository = (*BigQueryRepository)(nil)

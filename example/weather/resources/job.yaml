id: weather # config.Batch.JobName と一致させる
name: Weather Data Processing Job
description: This job fetches weather data, processes it, and stores it.
listeners: # ★ 追加: ジョブレベルのリスナー定義
  - ref: loggingJobListener # JobFactory で登録されているリスナー名

flow:
  start-element: fetchWeatherDataStep # フローの開始要素
  elements:
    fetchWeatherDataStep:
      id: fetchWeatherDataStep
      reader:
        ref: weatherItemReader # 新しいコンポーネント名に更新
      processor:
        ref: weatherItemProcessor # 新しいコンポーネント名に更新
      writer:
        ref: weatherItemWriter # 新しいコンポーネント名に更新
      chunk:
        item-count: 50 # config.Batch.ChunkSize を利用
        commit-interval: 1 # ★ 追加: コミット間隔を設定
      listeners: # ステップレベルリスナー
        - ref: loggingStepListener
        - ref: retryStepListener
      item-read-listeners: # アイテム読み込みリスナーを有効化
        - ref: loggingItemReadListener
      item-process-listeners: # アイテム処理リスナーを有効化
        - ref: loggingItemProcessListener
      item-write-listeners: # アイテム書き込みリスナーを有効化
        - ref: loggingItemWriteListener
      skip-listeners: # アイテムスキップリスナー
        - ref: loggingSkipListener
      retry-item-listeners: # アイテムリトライリスナー
        - ref: loggingRetryItemListener
      transitions:
        - on: COMPLETED # ステップが正常完了した場合
          to: processDummyDataStep # 次のステップへ遷移
        - on: FAILED # ステップが失敗した場合
          fail: true # ジョブ全体を失敗として終了
    processDummyDataStep:
      id: processDummyDataStep
      reader:
        ref: dummyItemReader # 新しいコンポーネント名に更新
      processor:
        ref: dummyItemProcessor # 新しいコンポーネント名に更新
      writer:
        ref: dummyItemWriter # 新しいコンポーネント名に更新
      chunk:
        item-count: 10 # このステップのチャンクサイズ
        commit-interval: 1 # ★ 追加: コミット間隔を設定
      listeners: # ステップレベルリスナー
        - ref: loggingStepListener
        - ref: retryStepListener
      item-read-listeners: # アイテム読み込みリスナーを有効化
        - ref: loggingItemReadListener
      item-process-listeners: # アイテム処理リスナーを有効化
        - ref: loggingItemProcessListener
      item-write-listeners: # アイテム書き込みリスナーを有効化
        - ref: loggingItemWriteListener
      skip-listeners: # アイテムスキップリスナー
        - ref: loggingSkipListener
      retry-item-listeners: # アイテムリトライリスナー
        - ref: loggingRetryItemListener
      transitions:
        - on: COMPLETED
          to: prepareDecisionDataStep # ★ 変更: 新しいステップへ遷移
        - on: FAILED
          fail: true # ジョブ全体を失敗として終了
    prepareDecisionDataStep: # ★ 追加: ExecutionContext に値を書き込む Tasklet ステップ
      id: prepareDecisionDataStep
      tasklet:
        ref: executionContextWriterTasklet
        properties:
          key: "decision.condition"
          value: "true" # ここを "false" に変更すると、Decision の別のパスをテストできます
      execution-context-promotion: # StepExecutionContext の値を JobExecutionContext にプロモート
        keys:
          - "decision.condition"
      listeners:
        - ref: loggingStepListener
      transitions:
        - on: COMPLETED
          to: checkConditionDecision # ★ 新しい Decision へ遷移
        - on: FAILED
          fail: true
    checkConditionDecision: # ★ 追加: ConditionalDecision 要素
      id: checkConditionDecision
      properties:
        conditionKey: "decision.condition" # ExecutionContext から取得するキー
        expectedValue: "true"             # この値と一致すれば COMPLETED
        defaultStatus: "FAILED"           # 一致しない場合やキーが見つからない場合のデフォルトステータス
      transitions:
        - on: COMPLETED # decision.condition が "true" の場合
          to: dummyTaskletStep # 既存の dummyTaskletStep へ
        - on: FAILED # decision.condition が "true" でない場合、またはキーが見つからない場合
          to: anotherDummyTaskletStep # 別のパスへ
    dummyTaskletStep: # 例として Tasklet ステップを追加 (既存)
      id: dummyTaskletStep
      tasklet:
        ref: dummyTasklet # JobFactory で登録されているダミーコンポーネント名
        properties:
          message: "Condition was TRUE! Executing dummyTaskletStep."
      listeners: # ステップレベルリスナー (TaskletStep も StepExecutionListener を持つ)
        - ref: loggingStepListener
        - ref: retryStepListener
      transitions:
        - on: COMPLETED
          end: true
        - on: FAILED
          fail: true
    anotherDummyTaskletStep: # ★ 追加: Decision の別のパスを示す Tasklet ステップ
      id: anotherDummyTaskletStep
      tasklet:
        ref: dummyTasklet
        properties:
          message: "Condition was FALSE or not found! Executing anotherDummyTaskletStep."
      listeners:
        - ref: loggingStepListener
      transitions:
        - on: COMPLETED
          end: true
        - on: FAILED
          fail: true
